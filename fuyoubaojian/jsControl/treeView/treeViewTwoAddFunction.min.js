/**
 * Created by CDCT on 2017/5/26.
 * author 375361172@qq.com
 * V1.0 (20170925)
 * V1.0.01 (20170928) 新增参数 plJL plZL
 * V1.0.02 (20171009) 修改第一次点击子节点没有的bug
 * V1.0.03 (20171010) 新增半选中状态 必须在showTreeView中传入 checked = 0才行
 * V1.0.04 (20171011) 新增自定义属性 customAttr 以对象的形式传入
 * V1.0.05 (20171011) 修改addItem新增子节点没有checked方法的bug
 * V1.0.06 (20171012) 修改checked bug
 * V1.0.07 (20171012) 新增span内容排序
 * icon,icons,checked,o[i]["name"]通过showTreeView传入 orderArr 支持四个值 默认[0,1,2,3]
 * 0代表控制显示默认的值 1代表传入的icon 2代表input选择框 3代表传入的name
 * V1.0.08 (20171018) 新增数据传入样式参数cssText 该属性对应的是span标签的是在style属性的当前项上扩展style样式
 * V1.0.09 (20171020) 修改自定义属性传入有问题bug
 * V1.0.10 (20171022) 修改WINDOW TOP指向
 * V1.0.11 (20171129) 修改隐藏菜单问题
 * V1.0.12 (20171207) 修复plJL plZL 为0的时候没有效果的bug
 * V1.0.13 (20180109) 新增參數showOne 是否像伸縮版一樣
 * V1.0.14 (20180109) 修复一定的bug
 */

//演示树
/**
 *
 *
 //url 请求地址
 //type 请求方式 get post 或者 local
 //data 如果请求方式是get 或者post那么data就是表示的是获取数据的帅选条件
 --如果是local那么data就表示树json对象
 //dataType:string 数据类型
 //success:function 创建树成功触发函数
 //error:function 创建树失败触发函数
 //elementId:string 放树节点的ID如果不设置 默认是treeView
 //treeViewClass:string 树节点的顶级class 方便设置样式
 //checkedFun:function checkedbox改变触发的函数
 //childClickFun:function 点击节
 //orderArr:[] span内容排序 icon,icons,checked,o[i]["name"]通过showTreeView传入 orderArr 支持四个值 默认[0,1,2,3]
 * 0代表控制显示默认的值 1代表传入的icon 2代表input选择框 3代表传入的name

 //init
 *bgImageCon控制器按钮 图标
 *
 * */


/**
 *
 *
 *
 * data说明
 * 基本类型
 * userLevel 等级
 * name 内容
 * list 子集
 * url 地址
 *
 * checked 类型
 * checked 1 显示checked,
 * checkedStr check的字符串
 * checkedMP 阻止冒泡
 * checkedSelect 为1表现选中
 * showTreeView:{checked:0} 认为是半选中情况并且要在引入了解释cin标签的样式和js文件的情况下
 *
 * icon 类型
 * icon 图标地址 icon1--icon2
 * 样式类型
 * plJL
 * 每级的padding-lift基量
 * plZL
 * 每级的增量
 *
 * menu 类型
 * str 字符串
 * img 图标地址
 * clickFun 点击回掉函数
 *
 */
/**
 * 返回对象说明
 * .addItem 添加子节点
 * ISOS 数据
 * menu与data的menu相对应
 * .getTree
 * 树行的主节点
 *
 * $.treeView.addAttribute 为对象添加固定的键值
 * $.treeView.changeAttribute 修改所有的键的名称
 * */

;(function(fun){
    var tv={};

    tv.checkedFun=function(a){
        if(typeof $.cin!="undefined"&& a.Obj.checked=="0"){
            var sd=$(a.NOW_PARENT).find('cin');
            var arrA=[];
            if(typeof  arguments[1]!="undefined"&&arguments[1]=="parent"){
                console.log(arguments[1]);
            }else{
                for(var i=0;i<sd.length;i++){
                    if(a.THIS!=sd[i]){
                        if(sd[i].getAttribute("data-value")!= a.THIS.getAttribute("data-value")){
                            sd[i].setAttribute("data-value",a.THIS.getAttribute("data-value"));
                            arrA.push(sd[i]);sd[i].innerHTML="";
                        }
                    }
                }
            }
            for(var q=0;q<arrA.length;q++){

                if(a.THIS.getAttribute("data-value")==2){
                    $.cin.valueC(arrA[q]);
                }else{
                    $(sd[q]).trigger("change",a.THIS.getAttribute("data-value"));
                }
            }
            var path=tv.getParentNode(a.THIS);
            for(i=0;i<path.length;i++){
                if($(path[i]).hasClass("treeViewDiv")&&path[i]!=a.NOW_PARENT){
                    var cd=$(path[i]).find('>.treeViewUl>.treeViewDiv>.treeViewSpan>cin');
                    var o=0;
                    var p=0;
                    for(var r=0;r<cd.length;r++){
                        if(cd[r].getAttribute("data-value")==2){
                            o++;
                        }
                        if(cd[r].getAttribute("data-value")==1){
                            p++;
                        }
                    }
                    if(o==cd.length){
                        if($(path[i]).find(">span").find('cin')[0]== a.THIS){
                            return 0
                        }
                        $.cin.valueC($(path[i]).find(">span").find('cin')[0]);
                    }else if(o>0){
                        if($(path[i]).find(">span").find('cin')[0]== a.THIS){
                            return 0
                        }
                        $(path[i]).find(">span").find('cin').html("");
                        $(path[i]).find(">span").find('cin').attr("data-value","1");
                        $(path[i]).find(">span").find('cin').trigger("change",["parent"]);
                    }else if(o==0){
                        if(p>0){
                            if($(path[i]).find(">span").find('cin')[0]== a.THIS){
                                return 0
                            }
                            $(path[i]).find(">span").find('cin').html("");
                            $(path[i]).find(">span").find('cin').attr("data-value","1");
                            $(path[i]).find(">span").find('cin').trigger("change",["parent"]);
                        }else{
                            if($(path[i]).find(">span").find('cin')[0]== a.THIS){
                                return 0
                            }
                            $(path[i]).find(">span").find('cin').html("");
                            $(path[i]).find(">span").find('cin').attr("data-value","0");
                            $(path[i]).find(">span").find('cin').trigger("change",["parent"]);
                        }
                    }
                    break;
                }
            }
        }else{
            var sd=$(a.NOW_PARENT).find('[type="checkbox"]');
            var arrA=[];
            if(typeof  arguments[1]!="undefined"&&arguments[1]=="parent"){
                console.log(arguments[1]);
            }else{
                for(var i=0;i<sd.length;i++){
                    if(a.THIS!=sd[i]){
                        if(sd[i].checked!=a.THIS.checked){
                            sd[i].checked=a.THIS.checked;
                            arrA.push(sd[i]);
                        }
                    }
                }
            }
            for(var qwe=0;qwe<arrA.length;qwe++){
                $(arrA[qwe]).trigger("change");
            }
            var path=tv.getParentNode(a.THIS);
            for(i=0;i<path.length;i++){
                if($(path[i]).hasClass("treeViewDiv")&&path[i]!=a.NOW_PARENT){
                    var cd=$(path[i]).find('>.treeViewUl>.treeViewDiv>.treeViewSpan [type="checkbox"]');
                    var o=0;
                    for(var r=0;r<cd.length;r++){
                        if(cd[r].checked){
                            o++;
                        }
                    }
                    if(o==cd.length){
                        if($(path[i]).find(">span").find('[type="checkbox"]')[0]== a.THIS){
                            return 0
                        }
                        $(path[i]).find(">span").find('[type="checkbox"]')[0].checked=a.THIS.checked;
                        $(path[i]).find(">span").find('[type="checkbox"]').trigger("change",["parent"]);

                    }else{
                        if($(path[i]).find(">span").find('[type="checkbox"]')[0]== a.THIS){
                            return 0
                        }
                        $(path[i]).find(">span").find('[type="checkbox"]')[0].checked=false;

                        $(path[i]).find(">span").find('[type="checkbox"]').trigger("change",["parent"]);
                    }
                    break;
                }
            }
        }

};


    tv.getElement = function(o,b){

        for(var i=0;i<o.length;i++){
            var urlstr = "";
            var classTop="";

            if(o[i]["userLevel"]==1){
                classTop= b.treeViewClass? b.treeViewClass:"";
            }else{
                classTop="";
            }
            try{
                var icon="";
                var icons="";
                var checked="";
                if(o[i]["icon"]){
                    var imagesUrl=o[i]["icon"].split("--");
                    if(imagesUrl.length>=2){
                        icons="<i class='treeViewSd' data-changeURL='"+imagesUrl[1]+"' style='background-image: url("+imagesUrl[0]+")'></i>";
                    }else{
                        console.log("返回数据 icon 有错误请修改 url1--url2这种形式");
                    }
                }
                var attr="";
                var isOpen = "";
                if(o[i]["list"]&&o[i]["list"].length){
                    var imgsd=b.bgImageCon?"background-image:url("+b.bgImageCon+");":"";
                    icon="<i style='"+imgsd+"left:"+(22+(o[i]["userLevel"]-1)*15)+"px;' class='treeIcon'></i>"
                }else{
                    icon="";
                }
                if(o[i]["checked"]==1){
                    if(typeof $.cin!="undefined"&& b.checked=="0"){
                        if(o[i]["checkedStr"]){
                            checked=o[i]["checkedStr"];
                            if(o[i]["checkedMP"]==1){
                                var a=$(checked);
                                a.attr("data-checkedMP",1);
                                checked= a.prop("outerHTML");
                            }
                        }else{
                            checked="<cin type='checkbox' class='treeCheckBox' ></cin>";
                            if(o[i]["checkedMP"]==1){
                                checked="<cin data-checkedMP='1' type='checkbox' class='treeCheckBox' ></cin>";
                            }
                        }
                    }else{
                        if(o[i]["checkedStr"]){
                            checked=o[i]["checkedStr"];
                            if(o[i]["checkedMP"]==1){
                                var a=$(checked);
                                a.attr("data-checkedMP",1);
                                checked= a.prop("outerHTML");
                            }
                        }else{
                            checked="<input type='checkbox' class='treeCheckBox' />";
                            if(o[i]["checkedMP"]==1){
                                checked="<input data-checkedMP='1' type='checkbox' class='treeCheckBox' />"
                            }
                        }
                    }
                    if(typeof o[i]["checkedSelect"]!="undefined"&&o[i]["checkedSelect"]==1){
                        checked=$(checked);
                        if(checked.attr("type")=="checkbox"){
                            checked.attr("data-checkedSelect",1);
                        }else{
                            checked.find('[type="checkbox"]').attr("data-checkedSelect",1);
                        }

                        checked=checked.prop("outerHTML");
                    }

                }
                if(typeof o[i]["open"]!="undefined" && (o[i]["open"]=="true"||o[i]["open"]==true)){
                    isOpen="data-isOpen='1'"
                }
                var targetML="";
                if(typeof o[i]["target"]!="undefined"){
                    targetML=o[i]["target"];
                }
                var urlSd="";
                if(o[i]['url']){
                    if(o[i]['url'].search("http:")!=-1||o[i]['url'].search("https:")!=-1){
                        urlSd=o[i]['url'];
                        targetML="target"
                    }else{
                        urlSd=o[i]['url'];
                    }
                }
                var isChild=0;
                if(o[i]["list"] == null||typeof  o[i]["list"] == "undefined" ||o[i]["list"] == []||o[i]["list"] ==""){
                    isChild=1;
                    b.dataArr.push(o[i]);
                }
                var menuStr="";
                if(o[i]["menu"]){
                    menuStr='<div class="pull-right more"><span style="position: absolute;top: 0px;width: 100%;text-align: center;left: 0px;padding-left: 0;">...</span>' +
                        '<div class="hiddenDiv">';
                    for(var menuS=0;menuS<o[i]["menu"].length;menuS++){
                        menuStr=menuStr+  '<div class="addTJ"><span class="icon_" '+(typeof o[i]["menu"][menuS].img!="undefined"?('style="background-image: url('+o[i]["menu"][menuS].img+')"'):"")+'></span>'+o[i]["menu"][menuS].str+'</div>' ;
                        b.menuArr.push({
                            ClickFun:o[i]["menu"][menuS].clickFun?o[i]["menu"][menuS].clickFun:function(){},
                            OS:o[i],
                            NOW_OPTION:o[i]["menu"][menuS]
                        });
                    }
                    menuStr=menuStr+'</div></div>';
                }
                if(o[i]["customAttr"]){
                    for(var q in o[i]["customAttr"]){
                        attr=attr+"data-"+q+"="+(o[i]["customAttr"][q]?o[i]["customAttr"][q]:-1)+" ";
                    }
                }
                var spStrArr=[
                    icon,icons,checked,o[i]["name"]
                ];

                var arrStr=new Array();
                if(typeof b.orderArr!="undefined"){
                    for(var w=0;w<b.orderArr.length;w++){
                        arrStr[w]=spStrArr[b.orderArr[w]];
                    }
                }else{
                    arrStr=spStrArr;
                }
                var styleStr="";
                if(typeof o[i]["cssText"]!="undefined"){
                    styleStr=styleStr+o[i]["cssText"];
                }
                if(typeof o[i]["url"]== "undefined"||o[i]["url"]==null){

                    urlstr = "<div "+attr+" class='treeViewDiv "+classTop+"'>"+menuStr+"<span child="+isChild+"  style='"+styleStr+" padding-left:"+((!isNaN(o[i]["plJL"])?o[i]["plJL"]:38)+(o[i]["userLevel"]-1)*(!isNaN(o[i]["plZL"])?o[i]["plZL"]:15))+"px;' class='treeViewSpan' "+isOpen+">"+arrStr[0]+arrStr[1]+arrStr[2]+arrStr[3]+"</span><ul class='treeViewUl' style='display: none;'>";
                }else{
                    urlstr = "<div "+attr+" class='treeViewDiv "+classTop+"'>"+menuStr+"<span child="+isChild+" style='"+styleStr+" padding-left:"+((!isNaN(o[i]["plJL"])?o[i]["plJL"]:38)+(o[i]["userLevel"]-1)*(!isNaN(o[i]["plZL"])?o[i]["plZL"]:15))+"px;' class='treeViewSpan'  "+isOpen+">"+arrStr[2]+arrStr[1]+"<a data-target='"+targetML+"' data-title='"+arrStr[3]+"' data-href='"+ urlSd +"'>"+arrStr[0]+arrStr[3]+"</a></span><ul class='treeViewUl' style='display: none;'>";
                }
                tv.str += urlstr;
                if(o[i]["list"] != null){
                    tv.getElement(o[i]["list"],b);
                }
                tv.str += "</ul></div>";

            }catch(e){
                console.log("拼接树节点,出错了!!"+e);
            }
        }
        return tv.str;
    };
    tv.str="";
    /*tv.showTreeView=function(O){

    };*/
//a json 对象 b showTreeView 中的参数对象
    tv.getParentNode=function(Obj,Arr){
        if(!Arr){
            var Arr=[];
        }
        Arr.push(Obj);

        if(Obj&&Obj.parentNode){
            tv.getParentNode(Obj.parentNode,Arr);
        }

        return Arr;
    };
    tv.addItem=function(o){
        var menuStr="";
        var ISOS = o.ISOS;
        var funArr=new Array();
        if(o.menu){
            menuStr= '<div class="pull-right more" style="">' +
                '<span style="position: absolute;top: 0px;width: 100%;text-align: center;left: 0px;padding-left: 0;">...</span>' +
                '<div class="hiddenDiv">';

            for(var i=0;i< o.menu.length;i++){
                menuStr=menuStr+      '<div class="addTJ"><span class="icon_" style="background-image: url('+o.menu[i].img+')"></span>'+o.menu[i].str+'</div>'
                funArr.push({
                    ClickFun: o.menu[i].clickFun,
                    OS:ISOS,
                    NOW_OPTION:o.menu[i]
                });
            }
            menuStr=menuStr+ '</div>' +
                '</div>';
        }
        var paddleft=$(o.forItem).find('>.treeViewSpan').css("padding-left");
        if($(o.forItem).find('.treeViewSpan>.treeIcon').length<=0){
            var strsd='<i style="left:'+(parseInt(paddleft)-16)+'px;" class="treeIcon"></i>';
            $(o.forItem).find('>.treeViewSpan').prepend(strsd);
        }
        var attr="";
        if(o.customAttr){
            for(var q in o["customAttr"]){
                attr=attr+"data-"+q+"="+o["customAttr"][q] +" ";
            }
        }
        var checked="";
        if(o.checked==1){
            if(typeof $.cin!="undefined"&& tv.getOption().checked=="0"){
                if(o.checkedStr){
                    checked=o.checkedStr;
                    if(o.checkedMP==1){
                        var a=$(checked);
                        a.attr("data-checkedMP",1);
                        checked= a.prop("outerHTML");
                    }
                }else{
                    checked="<cin type='checkbox' class='treeCheckBox' ></cin>";
                    if(o.checkedMP==1){
                        checked="<cin data-checkedMP='1' type='checkbox' class='treeCheckBox' ></cin>";
                    }
                }
            }else{
                if(o.checkedStr){
                    checked= o.checkedStr;
                    if(o.checkedMP==1){
                        var a=$(checked);
                        a.attr("data-checkedMP",1);
                        checked= a.prop("outerHTML");
                    }
                }else{
                    checked="<input type='checkbox' class='treeCheckBox' />";
                    if(o.checkedMP==1){
                        checked="<input data-checkedMP='1' type='checkbox' class='treeCheckBox' />"
                    }
                }
            }
            if(typeof o.checkedSelect!="undefined"&& o.checkedSelect==1){
                checked=$(checked);
                if(checked.attr("type")=="checkbox"){
                    checked.attr("data-checkedSelect",1);
                }else{
                    checked.find('[type="checkbox"]').attr("data-checkedSelect",1);
                }
                checked=checked.prop("outerHTML");
            }

        }
        var str='<div '+attr+' class="treeViewDiv ">' + menuStr + '<span child="1" style="padding-left:'+(parseInt(paddleft)+15)+'px" class="treeViewSpan">' +checked+
            '<i class="treeViewSd" '+((typeof o.icon!="undefined")?('data-changeurl="'+o.icon.split("--")[0] +'"'):"")+' style="'+((typeof o.icon!="undefined")?('background-image:url('+o.icon.split("--")[1] +')'):"")+'"></i>' +
            '<a data-target="target" data-title="'+ o.name+'" data-href="'+(o.url? o.url:"")+'">'+ o.name+'</a>' +
            '</span>' +
            '<ul class="treeViewUl" style="display: none;"></ul>' +
            '</div>';

        str=$(str);
        var allMenu=str.find(".addTJ");

        allMenu.on("click",function(e){
                    var ALL_PARENT = tv.getParentNode(this);
                    var NOW_PARENY=null;
                    for(var q=0;q<ALL_PARENT.length;q++){
                        if($(ALL_PARENT[q]).hasClass("treeViewDiv")){
                            NOW_PARENY=ALL_PARENT[q];
                            break;
                        }
                    }
                    var option={
                        THIS:this,//当前点击的节点
                        ISOS:funArr[allMenu.index(this)].OS,//当前行的数据
                        EVENT:e,//event对象
                        NOW_PARENT:NOW_PARENY,//当前点击treeViewDiv
                        NOW_OPTION:funArr[allMenu.index(this)].NOW_OPTION
                    };
                    funArr[allMenu.index(this)].ClickFun(option);

                });

        if($(o.forItem).find(">.treeViewUl").length){
            $(o.forItem).find(">.treeViewUl").append(str);
        }else{
            $(o.forItem).append(str);
        }
        if(o.checked==1){
            if(typeof $.cin!="undefined"&& tv.getOption().checked=="0"){
                $.cin.valueC($(str).find("[data-checkedSelect='1']")[0]);
            }else{
                $(str).find("[data-checkedSelect='1']")[0].checked=true;
                $(str).find("[data-checkedSelect='1']").trigger("change");
            }
        }


    };
    tv.centerDataFun=function(a,b){
        if(!b.preStr){
            b.preStr="";
        }

        var elementStr=tv.getElement(a,b);
        elementStr="<div class='treeViewMaxBox'>"+elementStr+"</div>";
        if(b.afterEle){
            b.boxDiv.html($("#"+ b.elementId).html()+b.preStr+elementStr);
        }else{
            b.boxDiv.html(b.preStr+elementStr);
        }
        if(b.success){
            b.success();
        }
        tv.treeViewEle= b.boxDiv.find(".treeViewMaxBox");
        /*if($("#"+b.elementId+" .treeViewUl")[0]){
         $("#"+b.elementId+" .treeViewUl")[0].show_s=true;
         console.log($("#"+b.elementId+" .treeViewUl")[0]);
         $($("#"+b.elementId+" .treeViewUl")[0]).find("i").addClass("change");
         $($("#"+b.elementId+" .treeViewUl")[0]).show(250);
         }*/
        var allChild= b.boxDiv.find("[child='1']");
        var init= b.init;
        for(var i=0;i<allChild.length;i++){
            $(allChild[i]).on("click",function(e){
                if(init==1){
                    init=0;
                }else{
                    b.childClickFun(this,b.dataArr[allChild.index(this)],e);
                }
            });
        }
        var allMenu= b.boxDiv.find(".addTJ");
        for (i=0;i<allMenu.length;i++){
            (function(jie){
                $(allMenu[i]).on("click",function(e){
                    var ALL_PARENT = tv.getParentNode(this);
                    var NOW_PARENY=null;
                    for(var i=0;i<ALL_PARENT.length;i++){
                        if($(ALL_PARENT[i]).hasClass("treeViewDiv")){
                            NOW_PARENY=ALL_PARENT[i];
                            break;
                        }
                    }
                    var option={
                        THIS:allMenu[jie],//当前点击的节点
                        ISOS:b.menuArr[jie].OS,//当前行的数据
                        EVENT:e,//event对象
                        NOW_PARENT:NOW_PARENY,//当前点击treeViewDiv
                        NOW_OPTION:b.menuArr[jie].NOW_OPTION
                    };
                    b.menuArr[jie].ClickFun(option);
                })
            })(i);

        }
        var cfun=function(){
            var e=null;
            if(window.event){
                e=window.event;
            }else if(typeof event!="undefined"){
                e=event
            }else{
                e=arguments.callee.arguments[0]
            }
            var element= e.target?e.target:e.srcElement;
            var elementFuArr=tv.getParentNode(element);
            var elementFu=null;
            var a=0;
            for(var i=0;i<elementFuArr.length;i++){
                if($(elementFuArr[i]).attr("data-checkedMP")==1){
                    return 0;
                }
                if($(elementFuArr[i]).hasClass("treeViewDiv")){
                    if(elementFu==null){
                        elementFu=elementFuArr[i];
                    }
                }
                if($(elementFuArr[i]).hasClass("more")){
                    a=1
                }
            }
            if(elementFu==null){
                return 0;
            }
            if(a==1){
                return 0;
            }
            var __ul=$(elementFu).find(">ul");
            var path= tv.getParentNode(element);

            if(!__ul[0].show_s){
                __ul[0].show_s=true;
                $(__ul).show(250);

                for(var s=0;s<path.length;s++){
                    if($(path[s]).hasClass("treeViewDiv")){
                        $(path[s]).find(">.treeViewSpan .treeIcon").addClass("change");
                        break;
                    }
                }
            }else{
                __ul[0].show_s=false;
                $(__ul).hide(250);
                for(var s=0;s<path.length;s++){
                    if($(path[s]).hasClass("treeViewDiv")){
                        $(path[s]).find(">.treeViewSpan .treeIcon").removeClass("change");
                        break;
                    }
                }
            }
            if(b.showOne){
                var allPrent=tv.getParentNode(__ul[0]);
                var allEle= b.boxDiv.find("ul");
                for(var pq=0;pq<allEle.length;pq++){
                    if(allPrent.indexOf(allEle[pq])==-1){
                        allEle[pq].show_s=false;
                        $( allEle[pq]).hide(250);
                        $(allEle[pq].parentNode).find(">.treeViewSpan .treeIcon").removeClass("change");
                    }
                }
            }
            b.boxDiv.find(".treeViewSpan").removeClass("change");
            $(elementFu).find(">.treeViewSpan").addClass("change");
        };
        (typeof b.boxDiv[0]!="undefined")&&(b.boxDiv[0].onclick=cfun);



        $(document).on("mousemove",function(e){
            var element=e.target?e.target: e.srcElement;
            var path= tv.getParentNode(element);
            for(i=0;i<path.length;i++){
                if(path[i]==b.boxDiv[0]){
                    for(var i=0;i<path.length;i++){
                        if($(path[i]).hasClass("treeViewDiv")){
                            $(b.boxDiv).find(".treeViewDiv .more").css({
                                display:""
                            });
                            $(path[i]).children(".more").css({
                                display:"block"
                            });
                            $(path[i]).children(".more").click(function(e){

                                $(this).find(".hiddenDiv").css({
                                    display:"block"
                                });
                                var infoValue=$(this).offset().top-b.boxDiv.offset().top;
                                var height2=b.boxDiv.height()/2;
                                if(infoValue>height2){
                                    $(this).find(".hiddenDiv").css({
                                        top: "auto",
                                    bottom: "100%"
                                    });
                                }else{
                                    $(this).find(".hiddenDiv").css({
                                        top: "50%",
                                        bottom: "auto"
                                    });
                                }
                            });
                            return 1;
                        }
                    }
                }
            }
            $(b.boxDiv).find(".treeViewDiv .more").css({
                display:""
            });
            $(b.boxDiv).find(".treeViewDiv .more .hiddenDiv").css({
                display:""
            });
        });
        if(typeof $.cin!="undefined"&& b.checked=="0"){
            $(b.boxDiv).on("change","cin",function(e){
                e.stopPropagation();
                var pt=tv.getParentNode(e.target);
                for(var q=0;q<pt.length;q++){
                    if($(pt[q]).hasClass("treeViewDiv")){
                        var str=decodeURIComponent(this.getAttribute("data-options"))!="undefined"?decodeURIComponent(this.getAttribute("data-options")):"{}";
                        tv.checkedFun({
                            NOW_PARENT:pt[q],
                            EVENT:e,
                            NOW_OPTION:JSON.parse(str),
                            THIS:this,
                            Obj:b
                        },arguments[1]);
                        arguments[1]="";
                        b.checkedFun({
                            NOW_PARENT:pt[q],
                            EVENT:e,
                            NOW_OPTION:JSON.parse(str),
                            THIS:this,
                            Obj:b
                        });
                        break;
                    }
                }
            });
        }
        /*设置初始值*/

        $(b.boxDiv).on("change",'[type="checkbox"]',function(e){
            e.stopPropagation();
            var pt=tv.getParentNode(e.target);
            for(var q=0;q<pt.length;q++){
                if($(pt[q]).hasClass("treeViewDiv")){
                    var str=decodeURIComponent(this.getAttribute("data-options"))!="undefined"?decodeURIComponent(this.getAttribute("data-options")):"{}";
                    tv.checkedFun({
                        NOW_PARENT:pt[q],
                        EVENT:e,
                        NOW_OPTION:JSON.parse(str),
                        THIS:this,
                        Obj:b
                    },arguments[1]);
                    arguments[1]="";
                    b.checkedFun({
                        NOW_PARENT:pt[q],
                        EVENT:e,
                        NOW_OPTION:JSON.parse(str),
                        THIS:this,
                        Obj:b
                    });
                    break;
                }
            }

        });
        var openEle= $( b.boxDiv.eq(0)).find('[data-isOpen="1"]');
        for(var i = 0;i<openEle.length;i++){
            var path=tv.getParentNode(openEle[i]);
            for(var q=0;q<path.length;q++){
                if($(path[q]).hasClass("treeViewDiv")){
                    var __ul=$(path[q]).find(">ul");
                    __ul[0].show_s=true;
                    $(__ul).show(250);
                    $(path[q]).find(">.treeViewSpan .treeIcon").addClass("change");
                }
            }
        }
        var val=$(b.boxDiv).find('[data-checkedSelect="1"]');
        for(var v=0;v<val.length;v++){
            if(typeof $.cin!="undefined"&& b.checked==0){
                $.cin.valueC(val[v]);
            }else{
                val[v].checked=true;
                $(val[v]).trigger("change");
            }
        }
    };
    tv.getTree=function(){
        return tv.treeViewEle;
    };
    fun(tv);
})(function(tv){
    $.treeView={};
    $.treeView.changeAttribute=function(Obj,attr,attrs){
        var attr1=attr;
        var attrs1=attrs;
        for(var i=0;i<Obj.length;i++){
            if(typeof Obj[i][attr]!="undefined"){
                Obj[i][attrs]=Obj[i][attr];
            }
            delete Obj[i][attr];
            if(Obj[i]["list"] != null){
                $.treeView.changeAttribute(Obj[i]["list"],attr1,attrs1);
            }
        }
        return Obj;
    };

    $.treeView.addAttribute=function(Obj,attr,value){
        var attr1=attr;
        var attrs1=value;
        for(var i=0;i<Obj.length;i++){
            Obj[i][attr]=value;
            if(Obj[i]["list"] != null){
                $.treeView.addAttribute(Obj[i]["list"],attr1,attrs1);
            }
        }
        return Obj;
    };
    $.fn.showTreeView=function(Obj){
        var Objs=new Object();
        var THIS = this;
        var O={
            elementId:"",
            type:"LOCAL",
            childClickFun:function(e,d,c){},
            error:function(){},
            afterEle:"",
            data:"",
            bgImageCon:null,
            checkedFun:function(a){},
            init:0,
            checked:0,
            treeViewClass:"treeViewFirst",
            showOne:false,
            success:function(){}
        };
        O.boxDiv= O.elementId==""?THIS:$("#"+ O.elementId);
        $.extend(O,Obj);
        $.extend(Objs,tv);
        tv.str="";

        O.elementId=O.elementId?O.elementId:"treeView";
        O.childClickFun=O.childClickFun?O.childClickFun:function(e,d,c){};
        var type= O.type.toUpperCase()=="GET"?0:O.type.toUpperCase()=="POST"?1:O.type.toUpperCase()=="LOCAL"?2:0;
        O.dataArr=new Array();
        O.menuArr=new Array();
        if(type==0||type==1){
            $.ajax({
                type: O.type,
                dataType: O.dataType,
                success:function(data){
                    tv.centerDataFun(data,O);
                },
                error:function(){
                    console.error("发送ajax出错请检查地址是否正确");
                    if(O.error){
                        O.error();
                    }
                }
            });
        }else{
            if(!O.data){
                if(O.error){
                    O.error();
                }
                console.warn("传入的data json对象是没有定义的请定义");
                return;
            }else{
                tv.centerDataFun(O.data,O);
            }
        }
        tv.getOption=function(){
            return O;
        };
        return Objs;
    }

});


//url 请求地址
//type 请求方式 get post 或者 local
//data 如果请求方式是get 或者post那么data就是表示的是获取数据的帅选条件
// 如果是local那么data就表示树json对象

//dataType 数据类型
//success 创建树成功触发函数
//error 创建树失败触发函数
//elementId 放树节点的ID如果不设置 默认是treeView
//treeViewClass 树节点的顶级class 方便设置样式
//preStr 节点前缀

